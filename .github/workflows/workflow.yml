name: workflow.yml
on:
  push:
    branches:
      - master
      - main

jobs:
  integration:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for accurate results of code analysis 

      - name: Install required tools
        run: |
          dotnet tool install -g dotnet-sonarscanner
          dotnet tool install -g dotnet-reportgenerator-globaltool

      - name: Start Static Code Analysis
        run: |
          dotnet sonarscanner begin \
          /k:${{ vars.SONARQUBE_PKEY }} \
          /d:sonar.host.url=${{ vars.SONARQUBE_HOST_URL }} \
          /d:sonar.token=${{ secrets.SONARQUBE_TOKEN }} \
          /d:sonar.coverageReportPaths="coverage-report/SonarQube.xml" \
          /d:sonar.exclusions="coverage-report/**, FrontEnd/**" \
          /d:sonar.qualitygate.wait=true \
          /d:sonar.qualitygate.timeout=300

      - name: Build
        run: dotnet build

      - name: Run unit tests
        run: |
          dotnet test --collect:"XPlat Code Coverage" --results-directory TestResults

      - name: Generate report
        run: |
          reportgenerator \
            -reports:TestResults/**/coverage.cobertura.xml \
            -targetdir:coverage-report \
            -reporttypes:SonarQube

      - name: Complete Static Code Analysis
        run: |
          dotnet sonarscanner end \
          /d:sonar.token=${{ secrets.SONARQUBE_TOKEN }}      
  
  Delivery:
    needs: integration # This ensures delivery runs only if integration succeeds
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for accurate results of code analysis 

      - name: Install required tools
        run: |
          dotnet tool install -g dotnet-stryker
          dotnet tool install -g dotnet-reportgenerator-globaltool

      - name: Collect Coverage Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: Coverage Report
          path: coverage-report

      - name: Run Mutation Tests
        run: |
          dotnet stryker --break-at 80 --mutate "!**/MiddleTire/Program.cs"


      - name: Collect Stryker Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: Stryker Report
          path: StrykerOutput
  
  Deployment:
    needs: [integration, Delivery]
    runs-on: ubuntu-latest
    steps:

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for accurate results of code analysis 

      - name: Application Version
        id: semvar-app
        uses: paulhatch/semantic-version@v5.4.0
        with:
          bump_each_commit: 'true'
          tag_prefix: "v"

      - name: Display Version
        run: echo "Generated version is ${{ steps.semvar-app.outputs.version }}"
        
      - name: login to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: List files in build context for frontend
        run: |
          ls -R FrontEnd
    
      - name: List files in build context for webapi
        run: |
          ls -R MiddleTire

      - name: Build and Push Docker Images
        run: |
          for service in webapi frontend; do
            if [ "$service" = "frontend" ]; then
              context_dir="FrontEnd"
              dockerfile="Dockerfile"
            elif [ "$service" = "webapi" ]; then
              context_dir="MiddleTire"
              dockerfile="Dockerfile"
            fi
          
            # Build the Docker image with correct context
            docker build \
              -t ghcr.io/${{ github.repository }}:$service-staging \
              -t ghcr.io/${{ github.repository }}:$service-${{ steps.semvar-app.outputs.version }} \
              -f $context_dir/$dockerfile \
              $context_dir
          
            docker push ghcr.io/${{ github.repository }}:$service-staging
            docker push ghcr.io/${{ github.repository }}:$service-${{ steps.semvar-app.outputs.version }}
          done

      - name: Create release notes
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.semvar-app.outputs.version }}
          generateReleaseNotes: true
          body: |
            This release includes the following container images:
              - ghcr.io/${{ github.repository }}:webapi-${{ steps.semvar-app.outputs.version }}
              - ghcr.io/${{ github.repository }}:frontend-${{ steps.semvar-app.outputs.version }}
              - ghcr.io/${{ github.repository }}:mariadb-${{ steps.semvar-app.outputs.version }}
          allowUpdates: true

      - name: Deploy to Staging Server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ vars.STAGING_SERVER_IP }}
          username: ${{ vars.STAGING_SERVER_USERNAME }}
          key: ${{ secrets.STAGING_SERVER_SSH_KEY }}
          source: "docker-compose.yaml,db/**/*.*"
          target: dummy-data-app/
          rm: true

      - name: Update Staging Server
        uses: appleboy/ssh-action@v1.2.1
        with:
          host: ${{ vars.STAGING_SERVER_IP }}
          username: ${{ vars.STAGING_SERVER_USERNAME }}
          key: ${{ secrets.STAGING_SERVER_SSH_KEY }}
          script: |
            cd dummy-data-app
            
            cat <<EOF > .env
            DATABASE_ROOT_PASSWORD=${{ secrets.DATABASE_ROOT_PASSWORD }}
            DATABASE_NAME=${{ vars.DATABASE_NAME }}
            DATABASE_USER=${{ vars.DATABASE_USER }}
            DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}
            EOF
            
            sudo docker compose pull
            sudo docker compose up -d --build
          debug: true